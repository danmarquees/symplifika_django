#!/usr/bin/env python3
"""
Script para testar a configura√ß√£o do PostgreSQL
Este script verifica se a conex√£o com PostgreSQL est√° funcionando corretamente
"""

import os
import sys
import django
from django.db import connection
from django.core.management import execute_from_command_line

def setup_django():
    """Configura Django para uso standalone"""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'symplifika.settings')
    django.setup()

def test_database_connection():
    """Testa a conex√£o com o database"""
    print("üîç Testando conex√£o com o database...")

    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            result = cursor.fetchone()

        if result and result[0] == 1:
            print("‚úÖ Conex√£o com database estabelecida com sucesso!")
            return True
        else:
            print("‚ùå Problema na resposta do database")
            return False

    except Exception as e:
        print(f"‚ùå Erro na conex√£o com database: {e}")
        return False

def get_database_info():
    """Obt√©m informa√ß√µes sobre o database configurado"""
    from django.conf import settings

    db_config = settings.DATABASES['default']

    print("üìä Informa√ß√µes do Database:")
    print(f"   Engine: {db_config['ENGINE']}")

    if 'postgresql' in db_config['ENGINE']:
        print(f"   Host: {db_config.get('HOST', 'localhost')}")
        print(f"   Port: {db_config.get('PORT', '5432')}")
        print(f"   Database: {db_config.get('NAME', 'N/A')}")
        print(f"   User: {db_config.get('USER', 'N/A')}")
        print("   Password: [HIDDEN]")
    else:
        print(f"   Path: {db_config.get('NAME', 'N/A')}")

def test_database_tables():
    """Testa se as tabelas Django existem"""
    print("üóÇÔ∏è  Verificando tabelas do Django...")

    try:
        from django.contrib.auth.models import User

        # Tenta fazer uma query simples
        user_count = User.objects.count()
        print(f"‚úÖ Tabelas encontradas! Usu√°rios cadastrados: {user_count}")
        return True

    except Exception as e:
        print(f"‚ö†Ô∏è  Problema com tabelas Django: {e}")
        print("   Talvez seja necess√°rio executar: python manage.py migrate")
        return False

def test_write_operation():
    """Testa opera√ß√£o de escrita no database"""
    print("‚úçÔ∏è  Testando opera√ß√£o de escrita...")

    try:
        from django.contrib.auth.models import User

        # Tenta criar um usu√°rio de teste
        test_user, created = User.objects.get_or_create(
            username='test_postgresql',
            defaults={
                'email': 'test@postgresql.com',
                'first_name': 'Test',
                'last_name': 'PostgreSQL'
            }
        )

        if created:
            print("‚úÖ Usu√°rio de teste criado com sucesso!")
            # Remove o usu√°rio de teste
            test_user.delete()
            print("üóëÔ∏è  Usu√°rio de teste removido")
        else:
            print("‚úÖ Opera√ß√£o de escrita funcionando (usu√°rio j√° existia)")

        return True

    except Exception as e:
        print(f"‚ùå Erro na opera√ß√£o de escrita: {e}")
        return False

def test_app_models():
    """Testa os models espec√≠ficos do app"""
    print("üì± Testando models do app...")

    try:
        # Testa models do app shortcuts
        from shortcuts.models import Shortcut, Category

        shortcut_count = Shortcut.objects.count()
        category_count = Category.objects.count()

        print(f"‚úÖ Model Shortcut: {shortcut_count} registros")
        print(f"‚úÖ Model Category: {category_count} registros")

        return True

    except Exception as e:
        print(f"‚ö†Ô∏è  Problema com models do app: {e}")
        return False

def run_performance_test():
    """Executa teste simples de performance"""
    print("‚ö° Executando teste de performance...")

    import time
    from django.contrib.auth.models import User

    try:
        start_time = time.time()

        # Query simples
        users = list(User.objects.all()[:10])

        end_time = time.time()
        duration = (end_time - start_time) * 1000  # em milissegundos

        print(f"‚úÖ Query executada em {duration:.2f}ms")

        if duration < 100:
            print("üöÄ Performance excelente!")
        elif duration < 500:
            print("üëç Performance boa")
        else:
            print("‚ö†Ô∏è  Performance pode ser melhorada")

        return True

    except Exception as e:
        print(f"‚ùå Erro no teste de performance: {e}")
        return False

def check_migrations():
    """Verifica status das migra√ß√µes"""
    print("üîÑ Verificando status das migra√ß√µes...")

    try:
        from django.core.management import call_command
        from io import StringIO

        # Captura output do comando showmigrations
        out = StringIO()
        call_command('showmigrations', stdout=out)
        migrations_output = out.getvalue()

        # Verifica se h√° migra√ß√µes n√£o aplicadas
        if '[ ]' in migrations_output:
            print("‚ö†Ô∏è  H√° migra√ß√µes pendentes:")
            print(migrations_output)
            return False
        else:
            print("‚úÖ Todas as migra√ß√µes est√£o aplicadas")
            return True

    except Exception as e:
        print(f"‚ùå Erro ao verificar migra√ß√µes: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üêò Teste de Configura√ß√£o PostgreSQL")
    print("=" * 50)

    # Configurar Django
    try:
        setup_django()
        print("‚úÖ Django configurado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao configurar Django: {e}")
        sys.exit(1)

    # Lista de testes
    tests = [
        ("Informa√ß√µes do Database", get_database_info),
        ("Conex√£o com Database", test_database_connection),
        ("Status das Migra√ß√µes", check_migrations),
        ("Tabelas do Django", test_database_tables),
        ("Opera√ß√£o de Escrita", test_write_operation),
        ("Models do App", test_app_models),
        ("Teste de Performance", run_performance_test),
    ]

    results = []

    # Executar testes
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 30)

        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro inesperado em {test_name}: {e}")
            results.append((test_name, False))

    # Resumo dos resultados
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES")
    print("=" * 50)

    passed = 0
    total = len(results)

    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{status} - {test_name}")
        if result:
            passed += 1

    print(f"\nüìà Resultado: {passed}/{total} testes passaram")

    if passed == total:
        print("üéâ Todos os testes passaram! PostgreSQL est√° configurado corretamente.")
        return True
    else:
        print("‚ö†Ô∏è  Alguns testes falharam. Verifique a configura√ß√£o.")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Teste interrompido pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)
