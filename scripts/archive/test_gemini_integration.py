#!/usr/bin/env python
"""
Script de teste para verificar a integra√ß√£o com Google Gemini
"""

import os
import sys
import django
from pathlib import Path

# Configurar o ambiente Django
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'symplifika.settings')

try:
    django.setup()
except Exception as e:
    print(f"‚ùå Erro ao configurar Django: {e}")
    sys.exit(1)

from shortcuts.services import AIService
from django.conf import settings
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)

def test_environment():
    """Testa as configura√ß√µes do ambiente"""
    print("üîç Verificando configura√ß√µes do ambiente...")

    # Verificar se a API key est√° configurada
    api_key = settings.GEMINI_API_KEY
    if not api_key:
        print("‚ùå GEMINI_API_KEY n√£o est√° configurada")
        return False

    print(f"‚úÖ GEMINI_API_KEY configurada: {api_key[:10]}...")

    # Verificar se a biblioteca est√° instalada
    try:
        import google.generativeai as genai
        print("‚úÖ google-generativeai instalado corretamente")
    except ImportError:
        print("‚ùå google-generativeai n√£o est√° instalado")
        print("   Execute: pip install google-generativeai")
        return False

    return True

def test_ai_service_initialization():
    """Testa a inicializa√ß√£o do servi√ßo de IA"""
    print("\nüîç Testando inicializa√ß√£o do AIService...")

    try:
        service = AIService()
        print(f"‚úÖ AIService inicializado com modelo: {service.model_name}")

        if service.model:
            print("‚úÖ Modelo Gemini configurado corretamente")
        else:
            print("‚ùå Modelo Gemini n√£o foi configurado")
            return False

        return True
    except Exception as e:
        print(f"‚ùå Erro ao inicializar AIService: {e}")
        return False

def test_api_status():
    """Testa o status da API"""
    print("\nüîç Verificando status da API...")

    try:
        service = AIService()
        status = service.check_api_status()

        print(f"API configurada: {status['api_configured']}")
        print(f"Modelo: {status['model']}")
        print(f"API acess√≠vel: {status['api_accessible']}")

        if status['error']:
            print(f"Erro: {status['error']}")

        return status['api_accessible']
    except Exception as e:
        print(f"‚ùå Erro ao verificar status da API: {e}")
        return False

def test_text_enhancement():
    """Testa a funcionalidade de expans√£o de texto"""
    print("\nüîç Testando expans√£o de texto...")

    test_text = "Ol√°, obrigado pelo seu email."

    try:
        service = AIService()
        enhanced = service.enhance_text(test_text)

        print(f"Texto original: {test_text}")
        print(f"Texto expandido: {enhanced}")

        if enhanced and enhanced != test_text:
            print("‚úÖ Expans√£o de texto funcionando")
            return True
        else:
            print("‚ùå Expans√£o de texto n√£o funcionou como esperado")
            return False

    except Exception as e:
        print(f"‚ùå Erro na expans√£o de texto: {e}")
        return False

def test_email_template():
    """Testa a gera√ß√£o de template de email"""
    print("\nüîç Testando gera√ß√£o de template de email...")

    try:
        service = AIService()
        template = service.generate_email_template("boas-vindas", "profissional")

        print("Template gerado:")
        print("-" * 50)
        print(template)
        print("-" * 50)

        if template and "assunto" in template.lower():
            print("‚úÖ Gera√ß√£o de template funcionando")
            return True
        else:
            print("‚ùå Template n√£o foi gerado corretamente")
            return False

    except Exception as e:
        print(f"‚ùå Erro na gera√ß√£o de template: {e}")
        return False

def test_shortcuts_suggestions():
    """Testa as sugest√µes de atalhos"""
    print("\nüîç Testando sugest√µes de atalhos...")

    test_text = "Preciso enviar um email de agradecimento para o cliente"

    try:
        service = AIService()
        suggestions = service.suggest_shortcuts(test_text, 3)

        print(f"Texto: {test_text}")
        print("Sugest√µes:")

        for i, suggestion in enumerate(suggestions, 1):
            print(f"  {i}. {suggestion['trigger']} - {suggestion['title']}")
            print(f"     {suggestion['description']}")

        if suggestions and len(suggestions) > 0:
            print("‚úÖ Sugest√µes de atalhos funcionando")
            return True
        else:
            print("‚ùå Nenhuma sugest√£o foi gerada")
            return False

    except Exception as e:
        print(f"‚ùå Erro nas sugest√µes de atalhos: {e}")
        return False

def test_fallback_functionality():
    """Testa funcionalidades de fallback"""
    print("\nüîç Testando funcionalidades de fallback...")

    try:
        # Simular API key inv√°lida
        original_key = settings.GEMINI_API_KEY
        settings.GEMINI_API_KEY = ''

        service = AIService()

        # Testar template de fallback
        template = service.generate_email_template("agradecimento")

        if template and "agradecimento" in template.lower():
            print("‚úÖ Fallback de template funcionando")
            fallback_works = True
        else:
            print("‚ùå Fallback de template n√£o funciona")
            fallback_works = False

        # Restaurar API key
        settings.GEMINI_API_KEY = original_key

        return fallback_works

    except Exception as e:
        print(f"‚ùå Erro no teste de fallback: {e}")
        # Restaurar API key mesmo em caso de erro
        settings.GEMINI_API_KEY = original_key if 'original_key' in locals() else settings.GEMINI_API_KEY
        return False

def run_all_tests():
    """Executa todos os testes"""
    print("üöÄ Iniciando testes de integra√ß√£o com Google Gemini\n")

    tests = [
        ("Configura√ß√µes do ambiente", test_environment),
        ("Inicializa√ß√£o do servi√ßo", test_ai_service_initialization),
        ("Status da API", test_api_status),
        ("Expans√£o de texto", test_text_enhancement),
        ("Template de email", test_email_template),
        ("Sugest√µes de atalhos", test_shortcuts_suggestions),
        ("Funcionalidades de fallback", test_fallback_functionality)
    ]

    results = []

    for test_name, test_function in tests:
        print(f"\n{'='*60}")
        print(f"TESTE: {test_name}")
        print('='*60)

        try:
            result = test_function()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro inesperado no teste '{test_name}': {e}")
            results.append((test_name, False))

    # Resumo dos resultados
    print(f"\n{'='*60}")
    print("RESUMO DOS TESTES")
    print('='*60)

    passed = 0
    total = len(results)

    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{status} - {test_name}")
        if result:
            passed += 1

    print(f"\nResultado: {passed}/{total} testes passaram")

    if passed == total:
        print("\nüéâ Todos os testes passaram! A integra√ß√£o com Gemini est√° funcionando.")
    elif passed >= total * 0.7:  # 70% dos testes
        print("\n‚ö†Ô∏è  A maioria dos testes passou. Verifique os erros acima.")
    else:
        print("\n‚ùå Muitos testes falharam. Revise a configura√ß√£o.")

    return passed == total

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
