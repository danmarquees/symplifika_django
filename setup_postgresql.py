#!/usr/bin/env python3
"""
Script para configura√ß√£o local do PostgreSQL para o projeto Symplifika
Este script ajuda a configurar um ambiente de desenvolvimento local com PostgreSQL
"""

import os
import sys
import subprocess
import psycopg2
from psycopg2 import sql
from django.core.management.utils import get_random_secret_key

def run_command(command, check=True):
    """Execute um comando no shell"""
    print(f"Executando: {command}")
    try:
        result = subprocess.run(command, shell=True, check=check,
                              capture_output=True, text=True)
        if result.stdout:
            print(result.stdout)
        return result.returncode == 0
    except subprocess.CalledProcessError as e:
        print(f"Erro ao executar comando: {e}")
        if e.stderr:
            print(f"Erro: {e.stderr}")
        return False

def check_postgresql_installed():
    """Verifica se o PostgreSQL est√° instalado"""
    try:
        result = subprocess.run(['psql', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ PostgreSQL encontrado: {result.stdout.strip()}")
            return True
    except FileNotFoundError:
        pass

    print("‚ùå PostgreSQL n√£o encontrado")
    return False

def install_postgresql():
    """Instala PostgreSQL baseado no sistema operacional"""
    print("üì¶ Instalando PostgreSQL...")

    # Detectar sistema operacional
    if sys.platform.startswith('linux'):
        # Ubuntu/Debian
        if run_command("which apt-get", check=False):
            commands = [
                "sudo apt-get update",
                "sudo apt-get install -y postgresql postgresql-contrib python3-dev libpq-dev"
            ]
        # CentOS/RHEL/Fedora
        elif run_command("which yum", check=False):
            commands = [
                "sudo yum install -y postgresql-server postgresql-contrib python3-devel postgresql-devel"
            ]
        elif run_command("which dnf", check=False):
            commands = [
                "sudo dnf install -y postgresql-server postgresql-contrib python3-devel postgresql-devel"
            ]
        else:
            print("‚ùå Sistema Linux n√£o suportado automaticamente")
            return False

    elif sys.platform == 'darwin':
        # macOS
        if run_command("which brew", check=False):
            commands = ["brew install postgresql"]
        else:
            print("‚ùå Homebrew n√£o encontrado. Instale o Homebrew primeiro.")
            return False

    else:
        print("‚ùå Sistema operacional n√£o suportado")
        return False

    for cmd in commands:
        if not run_command(cmd):
            return False

    return True

def start_postgresql_service():
    """Inicia o servi√ßo do PostgreSQL"""
    print("üöÄ Iniciando servi√ßo PostgreSQL...")

    if sys.platform.startswith('linux'):
        return run_command("sudo systemctl start postgresql")
    elif sys.platform == 'darwin':
        return run_command("brew services start postgresql")

    return True

def create_database_and_user():
    """Cria database e usu√°rio para o projeto"""
    print("üóÉÔ∏è  Configurando database e usu√°rio...")

    db_name = "symplifika_db"
    db_user = "symplifika_user"
    db_password = "symplifika_pass123"

    try:
        # Conectar como superuser postgres
        conn = psycopg2.connect(
            host="localhost",
            database="postgres",
            user="postgres",
            password=""  # Assumindo que n√£o h√° senha para postgres local
        )
        conn.autocommit = True
        cursor = conn.cursor()

        # Criar usu√°rio
        try:
            cursor.execute(
                sql.SQL("CREATE USER {} WITH PASSWORD %s").format(
                    sql.Identifier(db_user)
                ),
                [db_password]
            )
            print(f"‚úÖ Usu√°rio {db_user} criado")
        except psycopg2.errors.DuplicateObject:
            print(f"‚ÑπÔ∏è  Usu√°rio {db_user} j√° existe")

        # Criar database
        try:
            cursor.execute(
                sql.SQL("CREATE DATABASE {} OWNER {}").format(
                    sql.Identifier(db_name),
                    sql.Identifier(db_user)
                )
            )
            print(f"‚úÖ Database {db_name} criado")
        except psycopg2.errors.DuplicateDatabase:
            print(f"‚ÑπÔ∏è  Database {db_name} j√° existe")

        # Dar privil√©gios
        cursor.execute(
            sql.SQL("GRANT ALL PRIVILEGES ON DATABASE {} TO {}").format(
                sql.Identifier(db_name),
                sql.Identifier(db_user)
            )
        )

        cursor.close()
        conn.close()

        return db_name, db_user, db_password

    except psycopg2.Error as e:
        print(f"‚ùå Erro ao configurar database: {e}")
        return None, None, None

def create_env_file(db_name, db_user, db_password):
    """Cria arquivo .env com configura√ß√µes do PostgreSQL"""
    print("üìù Criando arquivo .env...")

    env_content = f"""# Configura√ß√µes do Django
DEBUG=True
SECRET_KEY={get_random_secret_key()}

# Configura√ß√µes do PostgreSQL local
DATABASE_URL=postgresql://{db_user}:{db_password}@localhost:5432/{db_name}

# Configura√ß√µes de CORS (para desenvolvimento)
CORS_ALLOWED_ORIGINS=http://localhost:8000,http://127.0.0.1:8000,http://localhost:3000,http://127.0.0.1:3000
CSRF_TRUSTED_ORIGINS=http://localhost:8000,http://127.0.0.1:8000

# API Keys (configure conforme necess√°rio)
GEMINI_API_KEY=your_gemini_api_key_here

# Configura√ß√µes de email (opcional)
# EMAIL_HOST=smtp.gmail.com
# EMAIL_PORT=587
# EMAIL_USE_TLS=True
# EMAIL_HOST_USER=your_email@gmail.com
# EMAIL_HOST_PASSWORD=your_app_password
"""

    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        print("‚úÖ Arquivo .env criado com sucesso")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar arquivo .env: {e}")
        return False

def install_python_dependencies():
    """Instala depend√™ncias Python incluindo psycopg2"""
    print("üì¶ Instalando depend√™ncias Python...")

    commands = [
        "pip install --upgrade pip",
        "pip install psycopg2-binary",
        "pip install python-decouple"
    ]

    for cmd in commands:
        if not run_command(cmd):
            return False

    return True

def run_django_setup():
    """Executa configura√ß√µes iniciais do Django"""
    print("üîß Configurando Django com PostgreSQL...")

    commands = [
        "python manage.py migrate",
        "python manage.py collectstatic --noinput"
    ]

    for cmd in commands:
        if not run_command(cmd):
            return False

    return True

def create_superuser():
    """Cria superusu√°rio Django"""
    print("üë§ Criando superusu√°rio Django...")
    print("Voc√™ precisar√° fornecer informa√ß√µes para o superusu√°rio:")

    return run_command("python manage.py createsuperuser")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Configura√ß√£o do PostgreSQL para Symplifika Django")
    print("=" * 50)

    # Verificar se PostgreSQL est√° instalado
    if not check_postgresql_installed():
        print("üì¶ PostgreSQL n√£o encontrado. Iniciando instala√ß√£o...")
        if not install_postgresql():
            print("‚ùå Falha na instala√ß√£o do PostgreSQL")
            sys.exit(1)

    # Iniciar servi√ßo PostgreSQL
    if not start_postgresql_service():
        print("‚ö†Ô∏è  N√£o foi poss√≠vel iniciar o PostgreSQL automaticamente")
        print("Por favor, inicie manualmente o servi√ßo PostgreSQL")

    # Instalar depend√™ncias Python
    if not install_python_dependencies():
        print("‚ùå Falha na instala√ß√£o das depend√™ncias Python")
        sys.exit(1)

    # Configurar database e usu√°rio
    db_name, db_user, db_password = create_database_and_user()
    if not all([db_name, db_user, db_password]):
        print("‚ùå Falha na configura√ß√£o do database")
        sys.exit(1)

    # Criar arquivo .env
    if not create_env_file(db_name, db_user, db_password):
        print("‚ùå Falha na cria√ß√£o do arquivo .env")
        sys.exit(1)

    # Configurar Django
    if not run_django_setup():
        print("‚ùå Falha na configura√ß√£o do Django")
        sys.exit(1)

    # Criar superusu√°rio
    print("\nüë§ Agora vamos criar um superusu√°rio para acessar o admin do Django")
    create_superuser()

    print("\nüéâ Configura√ß√£o conclu√≠da com sucesso!")
    print("=" * 50)
    print("üìã Resumo da configura√ß√£o:")
    print(f"   ‚Ä¢ Database: {db_name}")
    print(f"   ‚Ä¢ Usu√°rio: {db_user}")
    print(f"   ‚Ä¢ Host: localhost:5432")
    print(f"   ‚Ä¢ Arquivo .env criado com DATABASE_URL")
    print("\nüöÄ Para iniciar o servidor de desenvolvimento:")
    print("   python manage.py runserver")
    print("\nüì± Para acessar o admin:")
    print("   http://127.0.0.1:8000/admin/")
    print("\nüìÑ Vari√°veis de ambiente salvas em .env")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Configura√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)
