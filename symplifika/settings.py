"""
Django settings for symplifika project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import config
import dj_database_url

# --- Sentry, Slack, Email Integrations ---
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-08hhywmq^&43h_lqxa4pc%e_+yf^(zy+$4_o7fs(y1y^6urdi!')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# Sentry configuration (replace with your DSN)
SENTRY_DSN = os.environ.get("SENTRY_DSN", "")
if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()],
        traces_sample_rate=1.0,
        send_default_pii=True,
        environment="production" if not DEBUG else "development",
    )

# Slack notifications (replace with your webhook)
SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL", "")

def notify_slack(message):
    import requests
    if SLACK_WEBHOOK_URL:
        payload = {"text": message}
        try:
            requests.post(SLACK_WEBHOOK_URL, json=payload, timeout=5)
        except Exception as e:
            print(f"Erro ao enviar notificação Slack: {e}")

# Email notifications
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.environ.get("EMAIL_HOST", "smtp.seuservidor.com")
EMAIL_PORT = int(os.environ.get("EMAIL_PORT", 587))
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "seu@email.com")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "senha")
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", "Symplifika <no-reply@symplifika.com>")

# Render.com deployment configuration
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS = [RENDER_EXTERNAL_HOSTNAME, 'localhost', '127.0.0.1', 'testserver']
else:
    ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,testserver', cast=str).split(',')

# Garantir que testserver esteja sempre incluído para testes
if 'testserver' not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append('testserver')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'compressor',  # Minificação de static files

    # Local apps
    'core',
    'shortcuts',
    'users',
    'payments',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'symplifika.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.api_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'symplifika.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# PostgreSQL configuration for production (Render)
DATABASE_URL = config('DATABASE_URL', default='')

if DATABASE_URL:
    # Use PostgreSQL in production (Render) with psycopg3
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL,
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
    # Ensure we use psycopg3 driver
    DATABASES['default']['ENGINE'] = 'django.db.backends.postgresql'
else:
    # Use SQLite for local development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Configuração do django-compressor para minificação offline
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]
COMPRESS_ENABLED = not DEBUG
COMPRESS_OFFLINE = True

# Configuração do django-compressor para minificação offline
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]
COMPRESS_ENABLED = not DEBUG
COMPRESS_OFFLINE = True

# Use WhiteNoise for static files in production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': config('API_PAGE_SIZE', default=20, cast=int),
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
    'EXCEPTION_HANDLER': 'core.exceptions.custom_exception_handler',
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': config('API_THROTTLE_ANON', default='100/hour'),
        'user': config('API_THROTTLE_USER', default='1000/hour'),
        'login': config('API_THROTTLE_LOGIN', default='5/min'),
    }
}

# CORS Settings
if RENDER_EXTERNAL_HOSTNAME:
    CORS_ALLOWED_ORIGINS = [
        f"https://{RENDER_EXTERNAL_HOSTNAME}",
        f"http://{RENDER_EXTERNAL_HOSTNAME}",
        "http://localhost:3000",
        "http://127.0.0.1:3000",
    ]
    CSRF_TRUSTED_ORIGINS = [
        f"https://{RENDER_EXTERNAL_HOSTNAME}",
        f"http://{RENDER_EXTERNAL_HOSTNAME}",
    ]
else:
    CORS_ALLOWED_ORIGINS = config(
        'CORS_ALLOWED_ORIGINS',
        default='http://localhost:8000,http://127.0.0.1:8000,http://localhost:3000,http://127.0.0.1:3000',
        cast=str
    ).split(',')

    CSRF_TRUSTED_ORIGINS = config(
        'CSRF_TRUSTED_ORIGINS',
        default='http://localhost:8000,http://127.0.0.1:8000,http://localhost:3000,http://127.0.0.1:3000',
        cast=str
    ).split(',')

# Chrome Extension Origins
CSRF_TRUSTED_ORIGINS.extend([
    'chrome-extension://npbabdmkiegnhkmpndnnbmoeljkaeedl',
    'chrome-extension://*',  # Allow any chrome extension
])

CORS_ALLOWED_ORIGINS.extend([
    'chrome-extension://npbabdmkiegnhkmpndnnbmoeljkaeedl',
    'chrome-extension://*',  # Allow any chrome extension
])

# Chrome Extension CORS Configuration
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Allow all origins in development
CORS_ALLOW_CREDENTIALS = True

# Allow chrome-extension origins specifically
CORS_ORIGIN_REGEX_WHITELIST = [
    r"^chrome-extension://.*$",
]

CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Chrome Extension specific settings
CORS_PREFLIGHT_MAX_AGE = 86400

# Disable CSRF for API endpoints when using token auth
CSRF_COOKIE_SECURE = False if DEBUG else True
CSRF_USE_SESSIONS = False

# AI Configuration
GEMINI_API_KEY = config('GEMINI_API_KEY', default='')

# Application Configuration
APP_NAME = config('APP_NAME', default='Symplifika')
DEFAULT_MAX_SHORTCUTS = config('DEFAULT_MAX_SHORTCUTS', default=50, cast=int)
DEFAULT_MAX_AI_REQUESTS = config('DEFAULT_MAX_AI_REQUESTS', default=100, cast=int)

# Stripe Configuration
STRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='')
STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY', default='')
STRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='')
STRIPE_RETURN_URL = config('STRIPE_RETURN_URL', default='http://localhost:3000/account')

# Custom User Model (if needed)
# AUTH_USER_MODEL = 'users.User'

# =============================================================================
# API ENDPOINTS CONFIGURATION
# =============================================================================

# Base API URL configuration
API_BASE_URL = config('API_BASE_URL', default='http://localhost:8000')
FRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')

# API Endpoints mapping
API_ENDPOINTS = {
    'base': API_BASE_URL,
    'auth': {
        'login': f'{API_BASE_URL}/users/api/auth/login/',
        'register': f'{API_BASE_URL}/users/api/auth/register/',
        'logout': f'{API_BASE_URL}/users/api/auth/logout/',
        'token': f'{API_BASE_URL}/api/token/',
        'token_refresh': f'{API_BASE_URL}/api/token/refresh/',
        'password_reset': f'{API_BASE_URL}/users/auth/password-reset/',
        'password_reset_confirm': f'{API_BASE_URL}/users/auth/password-reset-confirm/',
    },
    'users': {
        'profile': f'{API_BASE_URL}/users/api/users/me/',
        'update_profile': f'{API_BASE_URL}/users/api/users/update-profile/',
        'change_password': f'{API_BASE_URL}/users/api/users/change-password/',
        'stats': f'{API_BASE_URL}/users/api/users/stats/',
        'delete_account': f'{API_BASE_URL}/users/api/users/delete-account/',
        'dashboard': f'{API_BASE_URL}/users/dashboard/',
    },
    'shortcuts': {
        'list': f'{API_BASE_URL}/shortcuts/api/shortcuts/',
        'create': f'{API_BASE_URL}/shortcuts/api/shortcuts/',
        'detail': f'{API_BASE_URL}/shortcuts/api/shortcuts/{{id}}/',
        'categories': f'{API_BASE_URL}/shortcuts/api/categories/',
        'execute': f'{API_BASE_URL}/shortcuts/api/shortcuts/{{id}}/execute/',
        'ai_generate': f'{API_BASE_URL}/shortcuts/api/ai/generate/',
        'ai_improve': f'{API_BASE_URL}/shortcuts/api/ai/improve/',
        'export': f'{API_BASE_URL}/shortcuts/api/export/',
        'import': f'{API_BASE_URL}/shortcuts/api/import/',
    },
    'payments': {
        'plans': f'{API_BASE_URL}/payments/plans/',
        'user_plan': f'{API_BASE_URL}/payments/user-plan/',
        'create_checkout_session': f'{API_BASE_URL}/payments/create-checkout-session/',
        'customer_portal': f'{API_BASE_URL}/payments/customer-portal/',
        'subscription_status': f'{API_BASE_URL}/payments/subscription-status/',
        'payment_history': f'{API_BASE_URL}/payments/payment-history/',
        'webhook': f'{API_BASE_URL}/payments/webhook/',
    },
    'admin': {
        'panel': f'{API_BASE_URL}/admin/',
    }
}

# Frontend URLs
FRONTEND_URLS = {
    'base': FRONTEND_URL,
    'login': f'{FRONTEND_URL}/auth/login',
    'register': f'{FRONTEND_URL}/auth/register',
    'dashboard': f'{FRONTEND_URL}/dashboard',
    'shortcuts': f'{FRONTEND_URL}/shortcuts',
    'profile': f'{FRONTEND_URL}/profile',
    'pricing': f'{FRONTEND_URL}/pricing',
    'subscription_success': f'{FRONTEND_URL}/subscription/success',
}

# Chrome Extension Configuration
CHROME_EXTENSION = {
    'id': config('CHROME_EXTENSION_ID', default='npbabdmkiegnhkmpndnnbmoeljkaeedl'),
    'api_endpoints': {
        'shortcuts': f'{API_BASE_URL}/shortcuts/api/shortcuts/',
        'auth': f'{API_BASE_URL}/users/api/auth/login/',
        'execute': f'{API_BASE_URL}/shortcuts/api/shortcuts/{{id}}/execute/',
    }
}

# Security settings for production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_REDIRECT_EXEMPT = []
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'symplifika': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
}
