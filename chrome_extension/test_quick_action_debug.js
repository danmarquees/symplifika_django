#!/usr/bin/env node

/**
 * Script de debug para Quick Action Icon - Symplifika
 * Testa comunica√ß√£o entre content script e background script
 */

console.log('üîç TESTE DE DEBUG - QUICK ACTION ICON');
console.log('=====================================');

// Simular teste no console do navegador
const testScript = `
// COLE ESTE C√ìDIGO NO CONSOLE DO NAVEGADOR (F12)
console.log('üîç Iniciando debug do Quick Action Icon...');

// 1. Verificar se a extens√£o est√° carregada
console.log('1. Verificando extens√£o...');
if (typeof chrome !== 'undefined' && chrome.runtime && chrome.runtime.id) {
    console.log('‚úÖ Chrome runtime dispon√≠vel');
    console.log('Extension ID:', chrome.runtime.id);
} else {
    console.log('‚ùå Chrome runtime n√£o dispon√≠vel');
}

// 2. Verificar estado do Quick Action
console.log('\\n2. Verificando Quick Action state...');
if (typeof state !== 'undefined') {
    console.log('‚úÖ State encontrado:', state);
    console.log('Shortcuts carregados:', state.shortcuts.length);
    console.log('Shortcuts:', state.shortcuts);
} else {
    console.log('‚ùå State n√£o encontrado - Quick Action pode n√£o estar carregado');
}

// 3. Testar comunica√ß√£o com background
console.log('\\n3. Testando comunica√ß√£o com background...');
if (typeof chrome !== 'undefined' && chrome.runtime) {
    chrome.runtime.sendMessage({ type: 'PING' }, (response) => {
        if (chrome.runtime.lastError) {
            console.log('‚ùå Erro na comunica√ß√£o:', chrome.runtime.lastError.message);
        } else {
            console.log('‚úÖ Comunica√ß√£o OK:', response);
        }
    });
    
    // Testar GET_SHORTCUTS
    chrome.runtime.sendMessage({ type: 'GET_SHORTCUTS' }, (response) => {
        if (chrome.runtime.lastError) {
            console.log('‚ùå Erro ao buscar shortcuts:', chrome.runtime.lastError.message);
        } else {
            console.log('üìã Resposta GET_SHORTCUTS:', response);
            if (response && response.shortcuts) {
                console.log('Total de shortcuts:', response.shortcuts.length);
                response.shortcuts.forEach((s, i) => {
                    console.log(\`Shortcut \${i+1}: \${s.trigger} - \${s.title}\`);
                });
            }
        }
    });
} else {
    console.log('‚ùå N√£o √© poss√≠vel testar comunica√ß√£o');
}

// 4. Verificar se h√° campos de texto na p√°gina
console.log('\\n4. Verificando campos de texto...');
const textFields = document.querySelectorAll('input[type="text"], input[type="email"], textarea, [contenteditable="true"]');
console.log(\`Campos de texto encontrados: \${textFields.length}\`);

// 5. Verificar se o √≠cone est√° sendo criado
console.log('\\n5. Verificando √≠cone Quick Action...');
const icon = document.querySelector('.symplifika-icon');
if (icon) {
    console.log('‚úÖ √çcone encontrado:', icon);
} else {
    console.log('‚ùå √çcone n√£o encontrado');
}

// 6. For√ßar carregamento de shortcuts
console.log('\\n6. For√ßando carregamento de shortcuts...');
if (typeof loadShortcuts === 'function') {
    loadShortcuts().then(() => {
        console.log('‚úÖ loadShortcuts executado');
        console.log('Shortcuts ap√≥s reload:', state.shortcuts.length);
    }).catch(err => {
        console.log('‚ùå Erro no loadShortcuts:', err);
    });
} else {
    console.log('‚ùå Fun√ß√£o loadShortcuts n√£o encontrada');
}

console.log('\\nüîç Debug conclu√≠do. Verifique os resultados acima.');
`;

console.log('INSTRU√á√ïES:');
console.log('1. Abra o Chrome e v√° para uma p√°gina com campos de texto');
console.log('2. Abra o DevTools (F12)');
console.log('3. V√° para a aba Console');
console.log('4. Cole e execute o c√≥digo abaixo:');
console.log('');
console.log(testScript);
