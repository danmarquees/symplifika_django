// Script completo de teste da extens√£o Symplifika
// Para executar no console do background script da extens√£o

console.log('üß™ Iniciando teste completo da extens√£o Symplifika...');

async function testExtensionComplete() {
  const API_BASE_URL = 'http://127.0.0.1:8000';
  
  console.log('\n=== TESTE 1: Verificar Estado Inicial ===');
  console.log('Estado da extens√£o:', extensionState);
  
  console.log('\n=== TESTE 2: Testar Conex√£o com API ===');
  try {
    const response = await fetch(`${API_BASE_URL}/`, {
      method: 'GET',
      headers: {
        'Origin': chrome.runtime.getURL('')
      }
    });
    console.log('‚úÖ Servidor Django respondeu:', response.status);
  } catch (error) {
    console.error('‚ùå Erro de conex√£o com servidor:', error);
    return;
  }
  
  console.log('\n=== TESTE 3: Testar Login ===');
  const loginResult = await handleLogin({
    login: 'test',
    password: 'test123'
  });
  
  console.log('Resultado do login:', loginResult);
  
  if (loginResult.success) {
    console.log('‚úÖ Login bem-sucedido!');
    
    console.log('\n=== TESTE 4: Testar Sincroniza√ß√£o de Atalhos ===');
    const syncResult = await syncShortcuts();
    console.log('Resultado da sincroniza√ß√£o:', syncResult);
    
    if (syncResult.success) {
      console.log('‚úÖ Sincroniza√ß√£o bem-sucedida!');
      console.log(`üìã Atalhos carregados: ${extensionState.shortcuts.length}`);
      
      if (extensionState.shortcuts.length > 0) {
        console.log('\n=== TESTE 5: Testar Expans√£o de Texto ===');
        const firstShortcut = extensionState.shortcuts[0];
        console.log('Testando atalho:', firstShortcut.trigger);
        
        const expansionResult = await handleTextExpansion({
          trigger: firstShortcut.trigger
        });
        
        console.log('Resultado da expans√£o:', expansionResult);
        
        if (expansionResult.success) {
          console.log('‚úÖ Expans√£o de texto funcionando!');
          console.log('Texto expandido:', expansionResult.expandedText.substring(0, 100) + '...');
        } else {
          console.log('‚ùå Falha na expans√£o de texto');
        }
      } else {
        console.log('‚ö†Ô∏è Nenhum atalho encontrado para testar expans√£o');
      }
    } else {
      console.log('‚ùå Falha na sincroniza√ß√£o de atalhos');
    }
  } else {
    console.log('‚ùå Falha no login');
  }
  
  console.log('\n=== TESTE 6: Testar Comunica√ß√£o com Popup ===');
  try {
    // Simular mensagem do popup
    const pingResult = await new Promise((resolve) => {
      chrome.runtime.onMessage.addListener(function handler(request, sender, sendResponse) {
        if (request.type === 'PING') {
          chrome.runtime.onMessage.removeListener(handler);
          resolve(sendResponse({
            success: true,
            status: 'alive',
            authenticated: extensionState.isAuthenticated,
            shortcuts: extensionState.shortcuts.length
          }));
        }
      });
      
      // Enviar ping para si mesmo
      chrome.runtime.sendMessage({ type: 'PING' });
    });
    
    console.log('‚úÖ Comunica√ß√£o interna funcionando');
  } catch (error) {
    console.log('‚ùå Erro na comunica√ß√£o interna:', error);
  }
  
  console.log('\n=== RESUMO DOS TESTES ===');
  console.log(`üîê Autenticado: ${extensionState.isAuthenticated ? '‚úÖ' : '‚ùå'}`);
  console.log(`üë§ Usu√°rio: ${extensionState.user?.username || 'N/A'}`);
  console.log(`üìã Atalhos: ${extensionState.shortcuts.length}`);
  console.log(`üîÑ √öltima sync: ${extensionState.lastSync || 'N/A'}`);
  
  if (extensionState.isAuthenticated && extensionState.shortcuts.length > 0) {
    console.log('\nüéâ TODOS OS TESTES PASSARAM! Extens√£o funcionando corretamente.');
    console.log('\nüìã Atalhos dispon√≠veis:');
    extensionState.shortcuts.forEach((shortcut, index) => {
      console.log(`   ${index + 1}. ${shortcut.trigger} - ${shortcut.title}`);
    });
  } else {
    console.log('\n‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima.');
  }
}

// Executar teste
testExtensionComplete().catch(console.error);

// Instru√ß√µes para o usu√°rio
console.log(`
üìñ INSTRU√á√ïES DE USO:

1. Copie e cole este c√≥digo no console do background script da extens√£o
2. Para acessar o console do background script:
   - V√° em chrome://extensions/
   - Encontre a extens√£o Symplifika
   - Clique em "service worker" (ou "background page")
   - Cole este c√≥digo no console

3. Se os testes passarem, a extens√£o est√° funcionando!

4. Para testar na pr√°tica:
   - Abra qualquer site com campo de texto
   - Digite um trigger (ex: !oi) seguido de espa√ßo
   - O texto deve ser expandido automaticamente

5. Para ver atalhos no popup:
   - Clique no √≠cone da extens√£o na barra de ferramentas
   - Fa√ßa login com: test / test123
   - Veja a lista de atalhos dispon√≠veis
`);
